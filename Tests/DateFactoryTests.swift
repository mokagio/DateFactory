//
//  DateFactoryTests.swift
//  DateFactoryTests
//
//  Created by Giovanni on 1/06/2016.
//  Copyright Â© 2016 mokagio. All rights reserved.
//

import XCTest
import DateFactory

class DateFactoryTests: XCTestCase {

  var dateFormatter: DateFormatter!

  override func setUp() {
    dateFormatter = DateFormatter()
    dateFormatter.dateFormat = "yyyy-MM-dd-HH-mm-ss.SSS"
    dateFormatter.timeZone = TimeZone(secondsFromGMT: 0)!
  }

  // When: calling the factory method with no value
  // It: returns the epoch date
  func testFactoryDefaultValue() {
    let sut = Date.date()

    XCTAssertEqual(dateFormatter.string(from: sut), "1970-01-01-00-00-00.000", "Expected date to be epoch")
  }

  // When: calling the factory method passing values
  // It: returns a date configured with those value
  func testFactoryWithValues() {
    let sut = Date.date(
      year: 2016,
      month: 6,
      day: 2,
      hour: 20,
      minute: 31,
      second: 42,
      millisecond: 123
    )

    XCTAssertEqual(dateFormatter.string(from: sut), "2016-06-02-20-31-42.123", "Expected date to be built using the value passed to the method")
  }

  // When: calling with a timezone
  // It: creates a date using the given timezone
  func testFactoryTimezone() {
    // Expecting a minus one hour difference in the date string that will be 
    // generated by the date formatter which is configured on GMT+0, as x hours
    // in a time zone y hours from GMT is (x - y) hours in the GMT time zone.
    let timezone = TimeZone(secondsFromGMT: 3600)!
    let sut = Date.date(
      year: 2016,
      month: 6,
      day: 2,
      hour: 20,
      minute: 31,
      second: 42,
      millisecond: 123,
      timeZone: timezone
    )

    XCTAssertEqual(dateFormatter.string(from: sut), "2016-06-02-19-31-42.123", "Expected date to be built using the value passed to the method, and the given time zone")
  }

  // When: calling with a timezone only
  // It: returns the epoch date in the given timezone
  func testFactoryTimezoneOnly() {
    // Expecting a minus one hour difference in the date string that will be 
    // generated by the date formatter which is configured on GMT+0, as x hours
    // in a time zone y hours from GMT is (x - y) hours in the GMT time zone.
    let timezone = TimeZone(secondsFromGMT: 3600)!
    let sut = Date.date(timeZone: timezone)

    XCTAssertEqual(dateFormatter.string(from: sut), "1969-12-31-23-00-00.000", "Expected date to be built using the given time zone on top of epoch")
  }
}
